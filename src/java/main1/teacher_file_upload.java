package main1;



import grammer_file.*;
import java.io.*;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.sql.*;
import grammer_file.Reading_Mode1;
import static main1.Login_form_teacher.t_code;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */

public class teacher_file_upload extends javax.swing.JFrame {
    
    //public static String name1 = "ANand";
    public static int noq = 0;  //creting this because of its avoid unneccesary typecasting from Sting to Int
    public static String[] key;
    //public String[] sample;
    public boolean val_key;
    public int k_count=0;
    //public static String uploaded_file_name;
    public static String file_path = "";
    //public String[] key1 = new String[noq];
    public boolean checkpoint1=false;
    public boolean checkpoint2=false;
    public boolean checkpoint3=true;
    public String keyword = "";
    public static String question_set_file_path = "";
    public static String dictionary_file_path = "";
    public static String language_file_path = "";
    public static String read="";
    public static boolean checkpoint_dic=false;
    public static boolean checkpoint_lang=false;
    
    
    
    /**
     * Creates new form first_page
     */
    public teacher_file_upload() {
        initComponents();
        
                
    }
    
    //copy the uploaded file with static path file
    public static void copy_file(String s_file,String d_file) throws IOException 
    {
        FileInputStream in = null;
        FileOutputStream out = null; 
        try {
            in = new FileInputStream(s_file);
            out = new FileOutputStream(d_file); 
            int c;
            while ((c = in.read()) != -1) 
            {
                out.write(c);
            }
        }finally {
            if (in != null)
            {
                in.close();
            }
            if (out != null)
            { 
                out.close();
            }
        }
    }
    
    //converted unstructured into structure
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        dic_file = new javax.swing.JButton();
        language_file = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("INFORMATION OF WORD FILE");

        back.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        logout.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        logout.setText("LOG OUT");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        dic_file.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        dic_file.setText("UPLOAD DICTIONARY FILE OR .dic");
        dic_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dic_fileActionPerformed(evt);
            }
        });

        language_file.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        language_file.setText("UPLOAD LANGUAGE FILE OR .lm");
        language_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                language_fileActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("UPLOAD AFTER MANUAL WORK");

        save.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        save.setText("SAVE");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dic_file)
                                    .addComponent(language_file, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(272, 272, 272)
                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(240, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dic_file)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(language_file)
                .addGap(68, 68, 68)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(240, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        //new Home_page().setVisible(true);       //directing to the Login_form
    }//GEN-LAST:event_backActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        int j = JOptionPane.showConfirmDialog(null,"DO YOU REALLY WANT TO LOGOUT","SELECT",JOptionPane.YES_NO_OPTION);
        if(j==0)
        {
          setVisible(false);
          //new Login_form().setVisible(true);   //logout
        }
        
    }//GEN-LAST:event_logoutActionPerformed

    private void dic_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dic_fileActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fc=new JFileChooser(); 
                int i=fc.showOpenDialog(this); 
                //String file_path = "";
                //System.out.println("i= "+i);
                if(i==JFileChooser.APPROVE_OPTION)
                { 
                    File f=fc.getSelectedFile(); 
                    
                    dictionary_file_path = f.getPath();     //get the file path
                    try{  
                        //copy_file(dictionary_file_path,"src\\java\\grammer_file\\dict.dic");
                        copy_file(dictionary_file_path,"C:\\Users\\Admin\\Documents\\Project_language_file\\"+t_code+".dic");
                        checkpoint_dic=true;
                    }catch(Exception e)
                    {
                        System.out.println(e);
                    }
                }
                else if(i==JFileChooser.CANCEL_OPTION)
                {
                    //System.out.println("i= "+i);
                    JOptionPane.showMessageDialog(this,"Cancel");
                }
                else
                {
                    System.out.println("nothing");
                }
                 boolean val_key = Pattern.compile(".*"+".dic").matcher(dictionary_file_path).matches();
                if(!val_key)
                {
                    JOptionPane.showMessageDialog(null,"<html><h1><span style=\"color:red font:-size:10px\">ONLY DICTIONARY or .dic FILE SUPPORTED<span></h1><html>","ALERT",JOptionPane.INFORMATION_MESSAGE);

                }
    }//GEN-LAST:event_dic_fileActionPerformed

    private void language_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_language_fileActionPerformed
        // TODO add your handling code here:
        JFileChooser fc=new JFileChooser(); 
                int i=fc.showOpenDialog(this); 
                //String file_path = "";
                //System.out.println("i= "+i);
                if(i==JFileChooser.APPROVE_OPTION)
                { 
                    File f=fc.getSelectedFile(); 
                    
                    language_file_path = f.getPath();     //get the file path
                    try{  
                        //copy_file(language_file_path,"src\\java\\grammer_file\\lang.lm");
                        copy_file(language_file_path,"C:\\Users\\Admin\\Documents\\Project_language_file\\"+t_code+".lm");
                        checkpoint_lang=true;
                    }catch(Exception e)
                    {
                        System.out.println(e);
                    }
                }
                else if(i==JFileChooser.CANCEL_OPTION)
                {
                    //System.out.println("i= "+i);
                    JOptionPane.showMessageDialog(this,"Cancel");
                }
                else
                {
                    System.out.println("nothing");
                }
                  boolean val_key = Pattern.compile(".*"+".lm").matcher(language_file_path).matches();
                if(!val_key)
                {
                    JOptionPane.showMessageDialog(null,"<html><h1><span style=\"color:red font:-size:10px\">ONLY LANGUAUE or .lm FILE SUPPORTED<span></h1><html>","ALERT",JOptionPane.INFORMATION_MESSAGE);

                }
    }//GEN-LAST:event_language_fileActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if(!checkpoint_dic)
        {
           JOptionPane.showMessageDialog(null,"<html><h1><span style=\"color:red font:-size:10px\">PLEASE UPLOAD DICTIONARY OR .dic FILE<span></h1><html>","ALERT",JOptionPane.ERROR_MESSAGE); 
        }
        else if(!checkpoint_lang)
        {
            JOptionPane.showMessageDialog(null,"<html><h1><span style=\"color:red font:-size:10px\">PLEASE UPLOAD LANGYAGE OR .lm FILE<span></h1><html>","ALERT",JOptionPane.ERROR_MESSAGE);
        }
        else 
        {
           // int i =
            JOptionPane.showConfirmDialog(null,"<html><h1><span style=\"font:-size:10px\"><B>FILE UPLOADED SUCCESSFULLY<br>USERNAME:</B>","AUTHETICATION",JOptionPane.OK_OPTION);
            
            setVisible(false);
                new admin_home().setVisible(true);
            /*(i==0)
            {
                setVisible(false);
                new Login_form_teacher().setVisible(true);    //directing to the Login_form
            }
            else
            {
                save.setEnabled(false);
            }
            JOptionPane.showMessageDialog(null,"<html><h1><span style=\"color:red font:-size:10px\">FILE UPLOADED SUCCESSFULLY<span></h1><html>","ALERT",JOptionPane.ERROR_MESSAGE);*/
        }
    }//GEN-LAST:event_saveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(teacher_file_upload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(teacher_file_upload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(teacher_file_upload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(teacher_file_upload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new teacher_file_upload().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton dic_file;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton language_file;
    private javax.swing.JButton logout;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
